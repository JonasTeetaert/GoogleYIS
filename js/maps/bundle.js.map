{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/js/Layer.js","app/js/Popup.js","app/js/Smooth.js","app/js/data-fr.js","app/js/data-nl.js","app/js/index.js","app/js/main.js","node_modules/animejs/lib/anime.js","node_modules/hammerjs/hammer.js","node_modules/nodelist-foreach-polyfill/index.js"],"names":[],"mappings":"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","file":"../bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","class Layer {\n  constructor(layer, cursor, data, popup) {\n    this.layer = layer;\n    this.cursor = cursor;\n    this.data = data;\n    this.popup = popup;\n    this.id = layer.id;\n    this.buttons = layer.querySelectorAll('.button');\n    this.paths = layer.querySelectorAll('path');\n    this.init();\n  }\n\n  init() {\n    const mq = window.matchMedia('(min-width: 801px)');\n    if (mq.matches) {\n      this.paths.forEach(p => {\n        p.addEventListener('mouseenter', (e) => {\n          this.cursor.classList.add('show');\n        })\n        p.addEventListener('mouseleave', (e) => {\n          this.cursor.classList.remove('show');\n        });\n        p.addEventListener('click', this.openPopup.bind(this));\n      });\n    } else {\n      this.buttons.forEach(btn => {\n        btn.addEventListener('click', this.openPopup.bind(this));\n      });\n    }\n  }\n\n  openPopup(e) {\n    const data = this.data.filter(person => person.id === this.id);\n    this.popup.set(data[0]);\n    this.popup.open();\n  }\n}\n\nexport default Layer;","class Popup {\r\n  constructor(node, coverLayer) {\r\n    this.node = node;\r\n    this.name = node.querySelector('.person__name');\r\n    this.rank = node.querySelector('.person__number');\r\n    this.list = node.querySelector('.person__rank');\r\n    this.description = node.querySelector('.popup__description');\r\n    this.imgSmall = node.querySelector('.person__img-container img');\r\n    this.imgBig = node.querySelector('.popup__img');\r\n    this.btnClose = node.querySelector('.popup__close');\r\n    this.status = false;\r\n    this.smooth = null;\r\n\r\n    this.coverLayer = coverLayer;\r\n\r\n    this.btnClose.addEventListener('click', this.close.bind(this));\r\n  }\r\n\r\n  setSmooth(smooth) {\r\n    this.smooth = smooth;\r\n  }\r\n\r\n  open() {\r\n    this.coverLayer.style.pointerEvents = 'none';\r\n    document.body.style.pointerEvents = 'none';\r\n    this.status = true;\r\n    this.node.classList.add('show');\r\n    const mq = window.matchMedia('(min-width: 801px)');\r\n    if (mq.matches) {\r\n      this.smooth.cancelAnimationFrame();\r\n    }\r\n  }\r\n\r\n  close(e) {\r\n    e.preventDefault();\r\n    this.node.classList.remove('show');\r\n    this.coverLayer.style.pointerEvents = 'visible';\r\n    document.body.style.pointerEvents = 'visible';\r\n    this.status = false;\r\n    const mq = window.matchMedia('(min-width: 801px)');\r\n    if (mq.matches) {\r\n      this.smooth.requestAnimationFrame();\r\n    }\r\n  }\r\n\r\n  set(data) {\r\n    this.name.innerHTML = data.name;\r\n    this.rank.innerHTML = data.rank;\r\n    this.list.innerHTML = data.list;\r\n    this.description.innerHTML = data.description;\r\n    this.imgSmall.src = data.imgSmall;\r\n    this.imgBig.src = data.imgBig;\r\n  }\r\n}\r\n\r\nexport default Popup;","import Hammmer from 'hammerjs';\r\nclass Smooth {\r\n  constructor(popup, layerObjects) {\r\n    this.bindMethods()\r\n\r\n    this.data = {\r\n      ease: 0.1,\r\n      current: {\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n      last: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      delta: {\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n      lastPan: {\r\n        x: 0,\r\n        y: 0,\r\n      }\r\n    }\r\n    this.popup = popup;\r\n    this.layerObjects = layerObjects;\r\n\r\n    // mouse\r\n    this.mouse = {\r\n      x: window.innerWidth / 2,\r\n      y: window.innerHeight / 2,\r\n    }\r\n\r\n    this.center = {\r\n      x: window.innerWidth / 2,\r\n      y: window.innerHeight / 2 + 25,\r\n    }\r\n    this.currentEvent = null;\r\n    this.prevEvent = null;\r\n\r\n    this.config = {\r\n      height: window.innerHeight,\r\n      width: window.innerWidth,\r\n      padding: 150,\r\n      offset: 50,\r\n      speed: 10,\r\n    }\r\n\r\n    this.math = {\r\n      lerp: (a, b, n) => {\r\n        return (1 - n) * a + n * b\r\n      },\r\n      norm: (value, min, max) => {\r\n        return (value - min) / (max - min)\r\n      }\r\n    }\r\n\r\n    this.dom = {\r\n      cover: document.querySelector('.cover-layer .smooth-nav'),\r\n      skew: document.querySelector('.skew'),\r\n      cursor: document.querySelector('.cursor'),\r\n      eyes: document.querySelectorAll('.eye'),\r\n    }\r\n\r\n    this.rAF = null\r\n\r\n    this.init();\r\n  }\r\n\r\n  bindMethods() {\r\n    ['run', 'requestAnimationFrame', 'cancelAnimationFrame', 'onPan']\r\n      .forEach((fn) => this[fn] = this[fn].bind(this))\r\n  }\r\n\r\n  handleMouseMove(event) {\r\n    this.currentEvent = event;\r\n    if (event && !this.popup.status) {\r\n      this.mouse = {\r\n        x: event.clientX,\r\n        y: event.clientY,\r\n      }\r\n      this.dom.cursor.style.transform = `translate3d(${this.mouse.x}px, ${this.mouse.y}px, 0)`;\r\n\r\n      this.dom.eyes.forEach((eye, i) => {\r\n        eye.setAttribute('transform', `translate(${this.mouse.x}, ${this.mouse.y}) scale(${1 - (i * 0.08)})`);\r\n      });\r\n\r\n      if (this.currentEvent && this.prevEvent) {\r\n        this.data.current.x -= this.currentEvent.screenX - this.prevEvent.screenX;\r\n        this.data.current.y -= this.currentEvent.screenY - this.prevEvent.screenY;\r\n      }\r\n    }\r\n  }\r\n\r\n  run() {\r\n    // if (this.currentEvent && this.prevEvent) {\r\n    //   this.data.delta.x = this.currentEvent.screenX - this.prevEvent.screenX;\r\n    //   this.data.delta.y = this.currentEvent.screenY - this.prevEvent.screenY;\r\n    // }\r\n    this.prevEvent = this.currentEvent;\r\n\r\n    const diffX = this.data.delta.x;\r\n    const accX = diffX / this.config.width;\r\n    const veloX = +accX;\r\n    const skewX = veloX * 117.5;\r\n\r\n    const diffY = this.data.delta.y;\r\n    const accY = diffY / this.config.height;\r\n    const veloY = +accY;\r\n    const skewY = veloY * 1000;\r\n\r\n    // console.log(skewX, skewY);\r\n    // this.dom.skew.style.transform = `skew(${skewX}deg, ${-skewY}deg)`;\r\n\r\n    // move parent\r\n    this.moveParent();\r\n\r\n    this.requestAnimationFrame();\r\n  }\r\n\r\n  onPan(e) {\r\n    if (e.type === 'panmove') {\r\n      this.data.current.x = this.data.lastPan.x + e.deltaX;\r\n      this.data.current.y = this.data.lastPan.y + e.deltaY;\r\n    }\r\n\r\n    this.layerObjects.forEach(layer => {\r\n      layer.buttons.forEach(btn => {\r\n        const pos = btn.getBoundingClientRect();\r\n        const dist = Math.sqrt(Math.pow(Math.abs(this.center.x - pos.left), 2) + Math.pow(Math.abs(this.center.y - pos.top), 2));\r\n        // const dist = Math.hypot(center.x - pos.left, center.y - center.top);\r\n        if (dist < 120) {\r\n          btn.classList.add('show');\r\n        } else {\r\n          btn.classList.remove('show');\r\n        }\r\n      });\r\n    });\r\n\r\n    if (e.type === 'panend') {\r\n      this.data.lastPan.x = this.data.current.x;\r\n      this.data.lastPan.y = this.data.current.y;\r\n    }\r\n  }\r\n\r\n  moveParent() {\r\n    const mq = window.matchMedia('(min-width: 801px)');\r\n    if (mq.matches) {\r\n      this.data.border = this.dom.cover.getBoundingClientRect();\r\n      const { border } = this.data;\r\n      const { padding, offset, speed } = this.config;\r\n      if (this.mouse.x < padding && border.left < -offset) { // left\r\n        this.data.last.x += speed;\r\n        this.data.current.x = this.data.last.x;\r\n        this.dom.cover.style.transform = `translate3d(${this.data.last.x}px, ${this.data.last.y}px, 0)`;\r\n      } else if (this.mouse.x > window.innerWidth - padding && border.right > window.innerWidth + offset) { // right\r\n        this.data.last.x -= speed;\r\n        this.data.current.x = this.data.last.x;\r\n        this.dom.cover.style.transform = `translate3d(${this.data.last.x}px, ${this.data.last.y}px, 0)`;\r\n      } else if (this.mouse.y < padding && border.top < -offset) { // top\r\n        this.data.last.y += speed;\r\n        this.data.current.y = this.data.last.y;\r\n        this.dom.cover.style.transform = `translate3d(${this.data.last.x}px, ${this.data.last.y}px, 0)`;\r\n      } else if (this.mouse.y > window.innerHeight - padding && border.bottom > window.innerHeight + offset) { // bottom\r\n        this.data.last.y -= speed;\r\n        this.data.current.y = this.data.last.y;\r\n        this.dom.cover.style.transform = `translate3d(${this.data.last.x}px, ${this.data.last.y}px, 0)`;\r\n      } else {\r\n        // this.data.last.x = this.math.lerp(this.data.last.x, this.data.current.x, this.data.ease);\r\n        // this.data.last.y = this.math.lerp(this.data.last.y, this.data.current.y, this.data.ease);\r\n        // this.dom.cover.style.transform = `translate3d(${this.data.last.x}px, ${this.data.last.y}px, 0)`;\r\n      }\r\n    }\r\n    this.data.last.x = this.math.lerp(this.data.last.x, this.data.current.x, this.data.ease);\r\n    this.data.last.y = this.math.lerp(this.data.last.y, this.data.current.y, this.data.ease);\r\n    this.dom.cover.style.transform = `translate3d(${this.data.last.x}px, ${this.data.last.y}px, 0)`;\r\n  }\r\n\r\n  onMobile() {\r\n    this.addMobileEvents();\r\n    requestAnimationFrame(this.run);\r\n  }\r\n\r\n  on() {\r\n    this.addEvents();\r\n    requestAnimationFrame(this.run);\r\n  }\r\n\r\n  off() {\r\n    this.cancelAnimationFrame();\r\n  }\r\n\r\n  requestAnimationFrame() {\r\n    this.rAF = requestAnimationFrame(this.run);\r\n  }\r\n\r\n  cancelAnimationFrame() {\r\n    cancelAnimationFrame(this.rAF);\r\n  }\r\n\r\n  destroy() {\r\n    this.data = null;\r\n    this.cancelAnimationFrame();\r\n  }\r\n\r\n  addMobileEvents() {\r\n    this.mc = new Hammmer.Manager(document.body);\r\n    this.mc.add(new Hammmer.Pan({\r\n      threshold: 0,\r\n      pointers: 0\r\n    }));\r\n    this.mc.on('panmove panend', this.onPan);\r\n  }\r\n\r\n  addEvents() {\r\n    document.onmousemove = this.throttle((e) => this.handleMouseMove(e), 25);\r\n    document.body.addEventListener('mouseenter', this.requestAnimationFrame);\r\n    document.body.addEventListener('mouseleave', this.cancelAnimationFrame);\r\n  }\r\n\r\n  throttle(fn, ms) {\r\n    var time, last = 0;\r\n    return function () {\r\n      var a = arguments,\r\n        t = this,\r\n        now = +(new Date),\r\n        exe = function () {\r\n          last = now;\r\n          fn.apply(t, a);\r\n        };\r\n      clearTimeout(time);\r\n      (now >= last + ms) ? exe() : time = setTimeout(exe, ms);\r\n    }\r\n  }\r\n\r\n  removeEvents() {\r\n    this.dom.coverLayer.removeEventListener('mouseenter', this.requestAnimationFrame, { passive: true })\r\n    this.dom.coverLayer.removeEventListener('mouseleave', this.cancelAnimationFrame, { passive: true })\r\n  }\r\n\r\n  init() {\r\n    // this.on();\r\n  }\r\n}\r\nexport default Smooth;","export default [\r\n  {\r\n    \"id\": \"GRETA\",\r\n    \"name\": \"Greta Thunberg\",\r\n    \"list\": \"Personnalités internationales les plus recherchées\",\r\n    \"rank\": 10,\r\n    \"imgSmall\": \"assets/images/vadot/GRETA_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/GRETA_big.png\",\r\n    \"description\": \"Greta Thunberg est une militante suédoise pour la lutte contre le réchauffement climatique. Elle reçoit plusieurs prix et distinctions pour son militantisme.\",\r\n  },\r\n  {\r\n    \"id\": \"ARAFAT\",\r\n    \"name\": \"DJ Arafat\",\r\n    \"list\": \"Personnalités francophones les plus recherchées\",\r\n    \"rank\": 9,\r\n    \"imgSmall\": \"assets/images/vadot/ARAFAT_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/ARAFAT_big.png\",\r\n    \"description\": \"DJ Arafat, de son vrai nom Ange Didier Houon, est mort d'un accident de la route le 12/08/2019 à Abidjan. Il est considéré comme l'un des plus grands chanteurs d'Afrique subsaharienne.\",\r\n  },\r\n  {\r\n    \"id\": \"KARL\",\r\n    \"name\": \"Karl Lagerfeld\",\r\n    \"list\": \"Personnalités internationales les plus recherchées\",\r\n    \"rank\": 2,\r\n    \"imgSmall\": \"assets/images/vadot/KARL_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/KARL_big.png\",\r\n    \"description\": \"Karl Otto Lagerfeld, né le 10/09/1933 à Hambourg et mort le 19/02/2019 à Neuilly-sur-Seine, est un grand couturier et styliste allemand ayant été le directeur artistique de la maison Chanel.\",\r\n  },\r\n  {\r\n    \"id\": \"MARIE\",\r\n    \"name\": \"Marie Laforet\",\r\n    \"list\": \"Personnalités francophones les plus recherchées\",\r\n    \"rank\": 1,\r\n    \"imgSmall\": \"assets/images/vadot/MARIE_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/MARIE_big.png\",\r\n    \"description\": \"Marie Laforêt, née le 05/10/1939 à Soulac-sur-Mer et morte le 02/11/2019 en Suisse, est une chanteuse et actrice française. Elle a joué dans 35 films et vendu plus de 35 millions d'albums.\",\r\n  },\r\n  {\r\n    \"id\": \"CAMERON\",\r\n    \"name\": \"Cameron Boyce\",\r\n    \"list\": \"Personnalités internationales les plus recherchées\",\r\n    \"rank\": 3,\r\n    \"imgSmall\": \"assets/images/vadot/CAMERON_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/CAMERON_big.png\",\r\n    \"description\": \"Cameron Boyce est un acteur, danseur, chanteur et mannequin américain, né le 28/05/1999 et mort le 06/072019 à Los Angeles. Il est connu pour son rôle dans la trilogie Descendants de Walt Disney.\",\r\n  },\r\n  {\r\n    \"id\": \"LUKE\",\r\n    \"name\": \"Luke Perry\",\r\n    \"list\": \"Personnalités internationales les plus recherchées\",\r\n    \"rank\": 4,\r\n    \"imgSmall\": \"assets/images/vadot/LUKE_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/LUKE_big.png\",\r\n    \"description\": \"Luke Perry est un acteur et producteur américain, né le 11/10/1966 à Mansfield et mort le 04/03/2019 à Burbank. Il est reconnu pour ses rôles dans les séries Beverly Hills 90210 ou Riverdale.\",\r\n  },\r\n  {\r\n    \"id\": \"CHIRAC\",\r\n    \"name\": \"Jacques Chirac\",\r\n    \"list\": \"Personnalités francophones les plus recherchées\",\r\n    \"rank\": 3,\r\n    \"imgSmall\": \"assets/images/vadot/CHIRAC_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/CHIRAC_big.png\",\r\n    \"description\": \"Jacques Chirac, né le 29/11/1932 à Paris et mort le 26/09/2019 dans la même ville, est un haut fonctionnaire et homme d'État français. Il fût président de la République française de 1995 à 2007.\",\r\n  },\r\n  {\r\n    \"id\": \"DAVID\",\r\n    \"name\": \"David Goffin\",\r\n    \"list\": \"Personnalités francophones les plus recherchées\",\r\n    \"rank\": 4,\r\n    \"imgSmall\": \"assets/images/vadot/DAVID_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/DAVID_big.png\",\r\n    \"description\": \"David Goffin est un joueur de tennis professionnel belge. Il a remporté quatre tournois en simple et un en double sur le circuit ATP. David Goffin est aujourd’hui 11e au classement ATP.\",\r\n  },\r\n  {\r\n    \"id\": \"ANGELE\",\r\n    \"name\": \"Angèle\",\r\n    \"list\": \"Personnalités francophones les plus recherchées\",\r\n    \"rank\": 7,\r\n    \"imgSmall\": \"assets/images/vadot/ANGELE_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/ANGELE_big.png\",\r\n    \"description\": \"Angèle est une autrice-compositrice-interprète, instrumentiste et productrice belge. Son premier album, Brol, certifié disque de diamant, s'est vendu à plus de 500 000 exemplaires.\",\r\n  },\r\n  {\r\n    \"id\": \"NOTREDAME\",\r\n    \"name\": \"Incendie Notre-Dame de Paris\",\r\n    \"list\": \"Recherches générales\",\r\n    \"rank\": 7,\r\n    \"imgSmall\": \"assets/images/vadot/NOTREDAME_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/NOTREDAME_big.png\",\r\n    \"description\": \"La cathédrale Notre-Dame de Paris est l'un des monuments les plus emblématiques de Paris. Le 15/04/2019, un violent incendie endommage fortement l'édifice, qui est depuis fermé au public.\",\r\n  },\r\n  {\r\n    \"id\": \"TOUR\",\r\n    \"name\": \"Tour de France à Bruxelles (Egan Bernal, vainqueur du Tour)\",\r\n    \"list\": \"Événements marquants\",\r\n    \"rank\": 1,\r\n    \"imgSmall\": \"assets/images/vadot/TOUR_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/TOUR_big.png\",\r\n    \"description\": \"Le Tour de France 2019 est la 106ᵉ édition du Tour de France cycliste. Le grand départ a eu lieu le 6 juillet 2019 à Bruxelles. Cette année, Egan Bernal est devenu le plus jeune vainqueur du Tour.\",\r\n  },\r\n  {\r\n    \"id\": \"MEGHAN\",\r\n    \"name\": \"Coupe du monde de foot féminin (Meghan Rapinoe)\",\r\n    \"list\": \"Événements marquants\",\r\n    \"rank\": 5,\r\n    \"imgSmall\": \"assets/images/vadot/MEGHAN_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/MEGHAN_big.png\",\r\n    \"description\": \"Pour la huitième édition de La Coupe du monde féminine de football 2019, c'est l'équipe des États-Unis qui remporte son 4e titre mondial. Megan Rapinoe est désignée meilleure joueuse du tournoi.\",\r\n  },\r\n  {\r\n    \"id\": \"TOM\",\r\n    \"name\": \"Tom Van Grieken\",\r\n    \"list\": \"Personnalités belges les plus recherchées\",\r\n    \"rank\": 8,\r\n    \"imgSmall\": \"assets/images/vadot/TOM_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/TOM_big.png\",\r\n    \"description\": \"Tom Van Grieken est un homme politique belge flamand. Il est le président du Vlaams Belang depuis le 19 octobre 2014.\",\r\n  },\r\n  {\r\n    \"id\": \"INSTAGRAM\",\r\n    \"name\": \"Comment supprimer son compte Instagram\",\r\n    \"list\": \"Comment… ?\",\r\n    \"rank\": 3,\r\n    \"imgSmall\": \"assets/images/vadot/INSTAGRAM_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/INSTAGRAM_big.png\",\r\n    \"description\": \"Cette année, nous avons observé une croissance de la recherche “Comment supprimer son compte Instagram” sur Google.\",\r\n  },\r\n  {\r\n    \"id\": \"WEIGHT\",\r\n    \"name\": \"Comment perdre du ventre/du poids\",\r\n    \"list\": \"Comment… ?\",\r\n    \"rank\": 2,\r\n    \"imgSmall\": \"assets/images/vadot/WEIGHT_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/WEIGHT_big.png\",\r\n    \"description\": \"Cette année, beaucoup de belges se sont inquiétés de savoir 'comment perdre du ventre/du poids' sur Google\",\r\n  },\r\n  {\r\n    \"id\": \"ELECTIONSBE\",\r\n    \"name\": \"Elections belges\",\r\n    \"list\": \"Comment ...?\",\r\n    \"rank\": 1,\r\n    \"imgSmall\": \"assets/images/vadot/ELECTIONS_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/ELECTIONS_big.png\",\r\n    \"description\": \"Les élections fédérales belges ont eu lieu le 26 mai 2019 afin d'élire les 150 membres de la Chambre des représentants belge. Beaucoup de belges se sont renseignés sur 'comment voter' sur Google.\",\r\n  },\r\n\r\n  {\r\n    \"id\": \"ELECTIONSEU\",\r\n    \"name\": \"Elections européennes\",\r\n    \"list\": \"Recherches générales\",\r\n    \"rank\": 17,\r\n    \"imgSmall\": \"assets/images/vadot/ELECTIONS_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/ELECTIONS_big.png\",\r\n    \"description\": \"Election européennes: Les élections européennes de 2019 ont eu lieu entre le 23 et le 26 mai 2019 dans les vingt-huit États membres afin d'élire les députés au sein du Parlement européen pour un mandat de cinq ans.\",\r\n  },\r\n  {\r\n    \"id\": \"IPHONE\",\r\n    \"name\": \"iPhone 11 (Tim Cook)\",\r\n    \"list\": \"Recherches générales\",\r\n    \"rank\": 6,\r\n    \"imgSmall\": \"assets/images/vadot/IPHONE_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/IPHONE_big.png\",\r\n    \"description\": \"L'iPhone 11, iPhone 11 Pro et iPhone 11 Pro Max, sont trois modèles de la treizième génération du smartphone de la société Apple. Ils ont été présentés au public le 10 septembre 2019.\",\r\n  },\r\n  {\r\n    \"id\": \"BILLIE\",\r\n    \"name\": \"Billie Eilish\",\r\n    \"list\": \"Personnalités internationales les plus recherchées\",\r\n    \"rank\": 6,\r\n    \"imgSmall\": \"assets/images/vadot/BILLIE_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/BILLIE_big.png\",\r\n    \"description\": \"Billie Eilish est une auteure-compositrice-interprète américaine. En novembre 2019, elle sort un single se nommant Everything I wanted qui fait rapidement sa place dans les chansons à succès.\",\r\n  },\r\n  {\r\n    \"id\": \"DUNCAN\",\r\n    \"name\": \"Eurovision 2019 (Duncan Laurence)\",\r\n    \"list\": \"Événements marquants\",\r\n    \"rank\": 3,\r\n    \"imgSmall\": \"assets/images/vadot/DUNCAN_small.jpg\",\r\n    \"imgBig\": \"assets/images/vadot/DUNCAN_big.png\",\r\n    \"description\": \"L'Eurovision est le grand concours européen de la chanson. Duncan Laurence est un auteur-compositeur-interprète néerlandais qui remporte l'édition 2019 avec la chanson Arcade.\",\r\n  }\r\n];\r\n","export default [\r\n  {\r\n    \"id\": \"WTFOCK\",\r\n    \"name\": \"WTFock\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 1,\r\n    \"imgSmall\": \"assets/images/marec/WTFOCK_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/WTFOCK_big.png\",\r\n    \"description\": \"wtFOCK is een Belgische online serie die het reilen en zeilen van een groep tienermeisjes -en jongens op de middelbare school volgt.\",\r\n  },\r\n  {\r\n    \"id\": \"JULIE\",\r\n    \"name\": \"Julie Van Espen\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 2,\r\n    \"imgSmall\": \"assets/images/marec/JULIE_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/JULIE_big.png\",\r\n    \"description\": \"Op 4 mei 2019 verdween 23-jarige Julie Van Espen. De dood van de jonge twintiger leidde tot heel wat verontwaardiging, woede en gevoel van onveiligheid, met protest tegen seksueel geweld als gevolg. \",\r\n  },\r\n  {\r\n    \"id\": \"TOUR\",\r\n    \"name\": \"Tour de France ‘19\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 3,\r\n    \"imgSmall\": \"assets/images/marec/TOUR_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/TOUR_big.png\",\r\n    \"description\": \"De eerste etappe startte op 6 juli 2019 in Brussel en eindigde op de Champs-Élysées in Parijs. Egan Bernal ging lopen met de eindzege. \",\r\n  },\r\n  {\r\n    \"id\": \"LOVEISLAND\",\r\n    \"name\": \"Love Island\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 4,\r\n    \"imgSmall\": \"assets/images/marec/LOVEISLAND_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/LOVEISLAND_big.png\",\r\n    \"description\": \"Love Island is een internationaal TV-programma waarin 10 vrijgezellen in een luxueuze villa op zoek gaan naar de ware liefde.\",\r\n  },\r\n  {\r\n    \"id\": \"VOTING\",\r\n    \"name\": \"Stemtest\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 5,\r\n    \"imgSmall\": \"assets/images/marec/VOTING_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/VOTING_big.png\",\r\n    \"description\": \"De stemtest is een tool die via vraag en antwoord de meest passende partij voor de kiezer in beeld brengt. \",\r\n  },\r\n  {\r\n    \"id\": \"IPHONE\",\r\n    \"name\": \"iPhone 11\",\r\n    \"list\": \"Trending Algemeen\",\r\n    \"rank\": 6,\r\n    \"imgSmall\": \"assets/images/marec/IPHONE_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/IPHONE_big.png\",\r\n    \"description\": \"Op 10 september 2019 werden de nieuwste iPhone 11, iPhone 11 Pro en iPhone 11 Pro Max voorgesteld aan het grote publiek ter opvolging van de iPhone XR.\",\r\n  },\r\n  {\r\n    \"id\": \"NOTREDAME\",\r\n    \"name\": \"Notre-Dame Paris\",\r\n    \"list\": \"Trending Algemeen\",\r\n    \"rank\": 7,\r\n    \"imgSmall\": \"assets/images/marec/NOTREDAME_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/NOTREDAME_big.png\",\r\n    \"description\": \"De Parijse kathedraal Notre-Dame werd op 15 april 2019 getroffen door een verwoestende brand. Miljoenen werden ingezameld om de meest bezochte bezienswaardigheid van Parijs weer op te lappen.\",\r\n  },\r\n  {\r\n    \"id\": \"JULEN\",\r\n    \"name\": \"Julen\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 8,\r\n    \"imgSmall\": \"assets/images/marec/JULEN_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/JULEN_big.png\",\r\n    \"description\": \"Op 13 januari viel peuter Julen Roselló in een 110 meter diepe put in Málaga waarbij hij overleed aan zijn verwondingen. Na 13 dagen slaagde een reddingsteam er in om de kleuter te bereiken. \",\r\n  },\r\n  {\r\n    \"id\": \"WIMBLEDON\",\r\n    \"name\": \"Wimbledon 2019\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 9,\r\n    \"imgSmall\": \"assets/images/marec/WIMBLEDON_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/WIMBLEDON_big.png\",\r\n    \"description\": \"De 113e editie van het Wimbledon Championship werd gespeeld van 1 tot 14 juli 2019. Djokovic bleef op kop, Spanjaard Rafael Nadal eindigde tweede, Roger Federer werd derde. \",\r\n  },\r\n  {\r\n    \"id\": \"EUROVISION\",\r\n    \"name\": \"Eurovision 2019\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 11,\r\n    \"imgSmall\": \"assets/images/marec/EUROVISION_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/EUROVISION_big.png\",\r\n    \"description\": \"Op 18 mei 2019 werd Eurovision georganiseerd in Expo Tel Aviv, Israël. Nederland scoorde 492 punten en won met het nummer ‘Arcade’ van Duncan Laurence.\",\r\n  },\r\n  {\r\n    \"id\": \"AFRIKACUP\",\r\n    \"name\": \"Afrika Cup 2019\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 12,\r\n    \"imgSmall\": \"assets/images/marec/AFRIKACUP_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/AFRIKACUP_big.png\",\r\n    \"description\": \"Voor de 32ste keer werd het Afrikaans kampioenschap voetbal gespeeld. Tussen 21 juni 2019 en 19 juli gaven de deelnemende landen het beste van zichzelf. Algerije werd de grote winnaar.\",\r\n  },\r\n  {\r\n    \"id\": \"MOBISCORE\",\r\n    \"name\": \"Mobiscore\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 13,\r\n    \"imgSmall\": \"assets/images/marec/MOBISCORE_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/MOBISCORE_big.png\",\r\n    \"description\": \"De Mobiscore berekent de afstand van elk adres in Vlaanderen naar verschillende soorten voorzieningen. Hoe hoger de score, hoe lager de mobiliteits- en milieu-impact van je woonplaats.\",\r\n  },\r\n  {\r\n    \"id\": \"VERKIEZINGEN\",\r\n    \"name\": \"Verkiezingen 26 mei\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 17,\r\n    \"imgSmall\": \"assets/images/marec/VERKIEZINGEN_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/VERKIEZINGEN_big.png\",\r\n    \"description\": \"De Belgische federale verkiezingen van 2019 werden georganiseerd op zondag 26 mei 2019, op dezelfde dag als de Europese verkiezingen van 2019 en de verkiezingen voor de deelstaten.\",\r\n  },\r\n  {\r\n    \"id\": \"PROLEAGUE\",\r\n    \"name\": \"Jupiler Pro League 2019\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 18,\r\n    \"imgSmall\": \"assets/images/marec/PROLEAGUE_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/PROLEAGUE_big.png\",\r\n    \"description\": \"De voetbalcompetitie tussen 16 teams startte eind juli en zal eindigen in maart 2020. De Belgische competitie startte in 1895 en is de oudste op het Europese vasteland.\",\r\n  },\r\n  {\r\n    \"id\": \"WKVROUWEN\",\r\n    \"name\": \"WK voetbal vrouwen 2019\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 20,\r\n    \"imgSmall\": \"assets/images/marec/WKVROUWEN_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/WKVROUWEN_big.png\",\r\n    \"description\": \"Het WK 2019 is de achtste editie van het wereldkampioenschap voetbal voor vrouwen. Aan het toernooi deden 24 landen mee. De eerste wedstrijd werd gespeeld op 7 juni 2019, de finale op 7 juli 2019.\",\r\n  },\r\n  {\r\n    \"id\": \"CHRISTOPHE\",\r\n    \"name\": \"Christophe Lambrecht\",\r\n    \"list\": \"Trending Belgen\",\r\n    \"rank\": 2,\r\n    \"imgSmall\": \"assets/images/marec/CHRISTOPHE_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/CHRISTOPHE_big.png\",\r\n    \"description\": \"Radiopresentator Christophe Lambrecht overleed op 5 mei op 48-jarige leeftijd aan hartfalen. De stem van Studio Brussel liet een vriendin en drie kinderen na.\",\r\n  },\r\n  {\r\n    \"id\": \"PAUL\",\r\n    \"name\": \"Paul Severs\",\r\n    \"list\": \"Trending Belgen\",\r\n    \"rank\": 3,\r\n    \"imgSmall\": \"assets/images/marec/PAUL_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/PAUL_big.png\",\r\n    \"description\": \"Op 9 april 2019 overleed Vlaamse charmezanger Paul Severs. Hij brak door met het nummer ‘Ik ben verliefd op jou’ en was gekend van het programma ‘Tien om te zien’.\",\r\n  },\r\n  {\r\n    \"id\": \"BJORG\",\r\n    \"name\": \"Bjorg Lambrecht\",\r\n    \"list\": \"Trending Belgen\",\r\n    \"rank\": 4,\r\n    \"imgSmall\": \"assets/images/marec/BJORG_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/BJORG_big.png\",\r\n    \"description\": \"Bjorg Lambrecht, wielrenner en één van de grootste klimtalenten van zijn generatie, overleed op 5 augustus 2019 na een zware val in de Ronde van Polen.\",\r\n  },\r\n  {\r\n    \"id\": \"THEO\",\r\n    \"name\": \"Théo Hayez\",\r\n    \"list\": \"Trending Belgen\",\r\n    \"rank\": 5,\r\n    \"imgSmall\": \"assets/images/marec/THEO_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/THEO_big.png\",\r\n    \"description\": \"Belgische backpacker Théo Hayez verdween op 31 mei 2019 en werd het laatst gezien in het Australische dorp Byron Bay. De zoektocht naar Théo loopt nog steeds.\",\r\n  }\r\n  ,\r\n  {\r\n    \"id\": \"WOUT\",\r\n    \"name\": \"Wout van Aert\",\r\n    \"list\": \"Trending Belgen\",\r\n    \"rank\": 6,\r\n    \"imgSmall\": \"assets/images/marec/WOUT_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/WOUT_big.png\",\r\n    \"description\": \"Topfavoriet Wout van Aert kwam tijdens de Tour de France op 19 juli ongelukkig ten val na een hapering met de wegafsluiting. Wout hoopt om snel zijn comeback te maken.\",\r\n  }\r\n  ,\r\n  {\r\n    \"id\": \"FLOR\",\r\n    \"name\": \"Flor Decleir\",\r\n    \"list\": \"Trending Belgen\",\r\n    \"rank\": 7,\r\n    \"imgSmall\": \"assets/images/marec/FLOR_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/FLOR_big.png\",\r\n    \"description\": \"Flor, zoon van Jan Decleir, is een Belgische acteur die reeds rollen wist te versieren in Vossenstreken en Geub. In 2019 maakte hij ook als eerste Decleir zijn intrede in ‘De Slimste Mens ter Wereld’.  \",\r\n  }\r\n  ,\r\n  {\r\n    \"id\": \"MARIEKE\",\r\n    \"name\": \"Marieke Vervoort\",\r\n    \"list\": \"Trending Belgen\",\r\n    \"rank\": 8,\r\n    \"imgSmall\": \"assets/images/marec/MARIEKE_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/MARIEKE_big.png\",\r\n    \"description\": \"Wielemie beoefende atletiek, zeilwagenrijden en triatlon. Marieke nam 2 keer deel aan de Paralympische Spelen en won hierbij tal van medailles. Op 22 oktober stierf ze na een strijd tegen een spierziekte.\",\r\n  }\r\n  ,\r\n  {\r\n    \"id\": \"TOM\",\r\n    \"name\": \"Tom van Grieken\",\r\n    \"list\": \"Trending Belgen\",\r\n    \"rank\": 9,\r\n    \"imgSmall\": \"assets/images/marec/TOM_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/TOM_big.png\",\r\n    \"description\": \"Tom van Grieken werd na de verkiezingen van 2019 met een monsterscore van 97,4% opnieuw verkozen tot voorzitter van Vlaams Belang.\",\r\n  },\r\n  {\r\n    \"id\": \"PIA\",\r\n    \"name\": \"Pia\",\r\n    \"list\": \"Trending Belgen\",\r\n    \"rank\": 10,\r\n    \"imgSmall\": \"assets/images/marec/PIA_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/PIA_big.png\",\r\n    \"description\": \"Pia lijdt aan de zeldzame spierziekte SMA en had het levensreddende medicijn Zolgensma nodig om langer te kunnen leven. Het medicijn kostte 1,9 miljoen euro. Dit bedrag werd op 2 dagen tijd ingezameld door crowdfunding.\",\r\n  },\r\n  {\r\n    \"id\": \"JOKE\",\r\n    \"name\": \"Joke Schauvliege\",\r\n    \"list\": \"Trending Belgen\",\r\n    \"rank\": 11,\r\n    \"imgSmall\": \"assets/images/marec/JOKE_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/JOKE_big.png\",\r\n    \"description\": \"Joke Schauvliege stapte begin februari 2019 op als Vlaams minister van Natuur, Landbouw en Omgeving. De komende 5 jaar blijft ze parlementslid voor CD&V.\",\r\n  },\r\n  {\r\n    \"id\": \"WILLY\",\r\n    \"name\": \"Willy Willy\",\r\n    \"list\": \"Trending Belgen\",\r\n    \"rank\": 12,\r\n    \"imgSmall\": \"assets/images/marec/WILLY_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/WILLY_big.png\",\r\n    \"description\": \"Willy Lambregt, bekend als Willy Willy en onder meer deel van The Scabs, overleed op 13 februari 2019 na een strijd tegen kanker.\",\r\n  },\r\n  {\r\n    \"id\": \"DRIES\",\r\n    \"name\": \"Dries Van Langenhove\",\r\n    \"list\": \"Trending Belgen\",\r\n    \"rank\": 13,\r\n    \"imgSmall\": \"assets/images/marec/DRIES_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/DRIES_big.png\",\r\n    \"description\": \"Dries Van Langenhove is de oprichter van het extreemrechtse Schild & Vrienden. Van Langenhove trekt sinds 9 januari 2019 als onafhankelijke een gemeenschappelijke Kamerlijst met Vlaams Belang.\",\r\n  },\r\n  {\r\n    \"id\": \"ASTRID\",\r\n    \"name\": \"Astrid Stockman\",\r\n    \"list\": \"Trending Belgen\",\r\n    \"rank\": 14,\r\n    \"imgSmall\": \"assets/images/marec/ASTRID_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/ASTRID_big.png\",\r\n    \"description\": \"Astrid Stockman is een 32-jarige Belgische sopraan met internationale bekendheid. In het seizoen van 2019 nam ze met succes deel aan De Slimste Mens ter Wereld.\",\r\n  },\r\n  {\r\n    \"id\": \"DAVID\",\r\n    \"name\": \"David Goffin\",\r\n    \"list\": \"Trending Belgen\",\r\n    \"rank\": 15,\r\n    \"imgSmall\": \"assets/images/marec/DAVID_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/DAVID_big.png\",\r\n    \"description\": \"David Goffin is een professionele Belgische tennisspeler en sluit het seizoen van 2019 af op de 11e plaats op ATP ranking. \",\r\n  },\r\n  {\r\n    \"id\": \"KARL\",\r\n    \"name\": \"Karl Lagerfeld\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 10,\r\n    \"imgSmall\": \"assets/images/marec/KARL_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/KARL_big.png\",\r\n    \"description\": \"Karl Otto Lagerfeld, geboren op 10/09/1933 in Hamburg, stierf op 19/02/2019 in Neuilly-sur-Seine. Karl was een grote Duitse modeontwerper en stylist en artistiek directeur van Chanel.\",\r\n  },\r\n  {\r\n    \"id\": \"NEYMAR\",\r\n    \"name\": \"Neymar\",\r\n    \"list\": \"Trending internationaal\",\r\n    \"rank\": 5,\r\n    \"imgSmall\": \"assets/images/marec/NEYMAR_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/NEYMAR_big.png\",\r\n    \"description\": \"Neymar, speler van Paris Saint-Germain, leed het afgelopen seizoen aan verschillende blessures. Eerder werd een contractverlenging bij PSG aangeboden, maar die liet Neymar voorlopig links liggen.\",\r\n  },\r\n  {\r\n    \"id\": \"BILLIE\",\r\n    \"name\": \"Billie Eilish\",\r\n    \"list\": \"Trending internationaal\",\r\n    \"rank\": 6,\r\n    \"imgSmall\": \"assets/images/marec/BILLIE_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/BILLIE_big.png\",\r\n    \"description\": \"Billie Eilish is een Amerikaanse singer-songwriter. Begin 2019 scoorde ze een monsterhit in ons land met ‘Bad Guy’.\",\r\n  },\r\n  {\r\n    \"id\": \"GRETA\",\r\n    \"name\": \"Greta Thunberg\",\r\n    \"list\": \"Trending internationaal\",\r\n    \"rank\": 10,\r\n    \"imgSmall\": \"assets/images/marec/GRETA_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/GRETA_big.png\",\r\n    \"description\": \"Greta Thunberg is een Zweedse activiste voor de strijd tegen de opwarming van de aarde. Ze ontving verschillende prijzen en onderscheidingen voor haar activisme.\",\r\n  },\r\n  {\r\n    \"id\": \"RAMADAN\",\r\n    \"name\": \"Ramadan 2019\",\r\n    \"list\": \"Trending evenementen\",\r\n    \"rank\": 7,\r\n    \"imgSmall\": \"assets/images/marec/RAMADAN_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/RAMADAN_big.png\",\r\n    \"description\": \"De ramadan is de negende maand op de Islamitische kalender en is de jaarlijkse periode waarin moslims vasten.\",\r\n  },\r\n  {\r\n    \"id\": \"VOTING\",\r\n    \"name\": \"Hoe stemmen op 26 mei\",\r\n    \"list\": \"Trending hoe?\",\r\n    \"rank\": 1,\r\n    \"imgSmall\": \"assets/images/marec/VOTING_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/VOTING_big.png\",\r\n    \"description\": \"Om ons optimaal voor te bereiden voor de verkiezingen van 2019, zochten we massaal naar de wijze van het stemmen.\",\r\n  },\r\n  {\r\n    \"id\": \"KIP\",\r\n    \"name\": \"Hoe oud wordt een kip\",\r\n    \"list\": \"Trending hoe?\",\r\n    \"rank\": 2,\r\n    \"imgSmall\": \"assets/images/marec/KIP_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/KIP_big.png\",\r\n    \"description\": \"In 2019 waren veel mensen in België nieuwsgierig naar de maximumleeftijd van een kip.\",\r\n  },\r\n  {\r\n    \"id\": \"USTIME\",\r\n    \"name\": \"Hoe laat is het in Amerika\",\r\n    \"list\": \"Trending hoe?\",\r\n    \"rank\": 3,\r\n    \"imgSmall\": \"assets/images/marec/USTIME_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/USTIME_big.png\",\r\n    \"description\": \"Al hangt het af van verschillende tijdzones, toch was de vraag naar het tijdstip in Amerika erg groot.\",\r\n  },\r\n  {\r\n    \"id\": \"VISUM\",\r\n    \"name\": \"Hoe zit het met mijn visumaanvraag\",\r\n    \"list\": \"Trending hoe?\",\r\n    \"rank\": 4,\r\n    \"imgSmall\": \"assets/images/marec/VISUM_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/VISUM_big.png\",\r\n    \"description\": \"Een aanzienlijk aantal personen in België zocht in 2019 naar het verloop van hun visumaanvraag.\",\r\n  },\r\n  {\r\n    \"id\": \"WEIGHT\",\r\n    \"name\": \"Hoe snel afvallen\",\r\n    \"list\": \"Trending hoe?\",\r\n    \"rank\": 5,\r\n    \"imgSmall\": \"assets/images/marec/WEIGHT_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/WEIGHT_big.png\",\r\n    \"description\": \"De zoektocht via Google naar de snelste manier van afvallen was erg populair in 2019.\",\r\n  },\r\n  {\r\n    \"id\": \"CONFEDERALISME\",\r\n    \"name\": \"Wat is confederalisme?\",\r\n    \"list\": \"Trending wat is?\",\r\n    \"rank\": 2,\r\n    \"imgSmall\": \"assets/images/marec/CONFEDERALISME_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/CONFEDERALISME_big.png\",\r\n    \"description\": \"De betekenis van confederalisme werd via Google een veelgezocht onderwerp.\",\r\n  },\r\n  {\r\n    \"id\": \"LEGIONELLA\",\r\n    \"name\": \"Wat is legionella?\",\r\n    \"list\": \"Trending wat is?\",\r\n    \"rank\": 3,\r\n    \"imgSmall\": \"assets/images/marec/LEGIONELLA_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/LEGIONELLA_big.png\",\r\n    \"description\": \"In 2019 zochten we massaal naar meer informatie over de bacterie legionella.\",\r\n  }\r\n  ,\r\n  {\r\n    \"id\": \"LUKE\",\r\n    \"name\": \"Luke Perry\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 15,\r\n    \"imgSmall\": \"assets/images/marec/LUKE_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/LUKE_big.png\",\r\n    \"description\": \"De Beverly Hills, 90210-ster overleed in maart ten gevolge van een beroerte. Verder werd Luke bekend door de hitserie ‘Riverdale’ en zou hij een rol spelen in ‘Once Upon a Time in Hollywood’.\",\r\n  },\r\n  {\r\n    \"id\": \"SUN\",\r\n    \"name\": \"Hoe warm is het? \",\r\n    \"list\": \"Trending hoe?\",\r\n    \"rank\": 6,\r\n    \"imgSmall\": \"assets/images/marec/SUN_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/SUN_big.png\",\r\n    \"description\": \"In 2019 waren tal van personen in België benieuwd naar de temperatuur van de dag.\",\r\n  },\r\n  {\r\n    \"id\": \"CAMERON\",\r\n    \"name\": \"Cameron Boyce\",\r\n    \"list\": \"Trending algemeen\",\r\n    \"rank\": 14,\r\n    \"imgSmall\": \"assets/images/marec/CAMERON_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/CAMERON_big.png\",\r\n    \"description\": \"De jonge Amerikaanse acteur, bekend van onder andere Disney Channel, overleed afgelopen zomer aan de gevolgen van epilepsie. Cameron werd 20 jaar.\",\r\n  },\r\n  {\r\n    \"id\": \"ROMELU\",\r\n    \"name\": \"Romelu Lukaku\",\r\n    \"list\": \"Meest trending Rode Duivels\",\r\n    \"rank\": 1,\r\n    \"imgSmall\": \"assets/images/marec/ROMELU_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/ROMELU_big.png\",\r\n    \"description\": \"Romelu Lukaku werd in 2019 topscorer aller tijden voor de Rode Duivels, en verkaste van Manchester United naar Inter Milaan.\",\r\n  },\r\n  {\r\n    \"id\": \"EURO2020\",\r\n    \"name\": \"EURO 2020\",\r\n    \"list\": \"Meest trending events\",\r\n    \"rank\": 9,\r\n    \"imgSmall\": \"assets/images/marec/EURO2020_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/EURO2020_big.png\",\r\n    \"description\": \"Het EK voetbal in 2020 deed Belgen nu al watertanden naar weken voetbalplezier. De Rode Duivels behaalden een perfect rapport van 30/30 in de kwalificatie.\",\r\n  },\r\n  {\r\n    \"id\": \"TOMORROWLAND\",\r\n    \"name\": \"Tomorrowland\",\r\n    \"list\": \"Meest trending events\",\r\n    \"rank\": 6,\r\n    \"imgSmall\": \"assets/images/marec/TOMORROWLAND_small.jpg\",\r\n    \"imgBig\": \"assets/images/marec/TOMORROWLAND_big.png\",\r\n    \"description\": \"Tomorrowland, het muziekfestival in Boom, was ook dit jaar één van de meest gezochte events in ons land.\",\r\n  }\r\n\r\n];\r\n","import './main';\n// import './morph';","/**\r\n * main.js\r\n * https://yearinsearch.be\r\n *\r\n * Licensed under the MIT license.\r\n * http://www.opensource.org/licenses/mit-license.php\r\n * \r\n * Copyright 2019, The Reference NV.\r\n * https://www.the-reference.com\r\n */\r\n\r\nimport 'nodelist-foreach-polyfill';\r\n\r\nimport Hammmer from 'hammerjs';\r\nimport Popup from './Popup';\r\nimport dataNl from './data-nl';\r\nimport dataFr from './data-fr';\r\nimport anime from 'animejs';\r\nimport Layer from './Layer';\r\nimport Smooth from './Smooth';\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\t// variables\r\n\tconst body = document.querySelector('body');\r\n\tconst coverLayer = document.querySelector('.cover-layer');\r\n\tconst smoothLayer = document.querySelector('.cover-layer .smooth-nav');\r\n\tconst coverSvgLayer = document.querySelector('.cover-svg-layer');\r\n\tconst skew = document.querySelector('.skew');\r\n\tconst topLayer = document.querySelector('.top-layer');\r\n\tconst holeLayer = document.querySelector('.hole-layer');\r\n\t//const btnStart = document.querySelector('.top-layer button');\r\n\tconst btnStart = document.querySelector('.eye__text');\r\n\tconst cursor = document.querySelector('.cursor');\r\n\tlet pos = { // position of cover\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t}\r\n\r\n\tlet center = {\r\n\t\tx: window.innerWidth / 2,\r\n\t\ty: window.innerHeight / 2 + 25,\r\n\t}\r\n\tlet popup;\r\n\tlet layerObjects = [];\r\n\tlet smooth;\r\n\tlet borders = smoothLayer.getBoundingClientRect();\r\n\r\n\t// functions\r\n\tconst init = () => {\r\n\t\t// create popup\r\n\t\tpopup = new Popup(document.querySelector('.popup'), smoothLayer);\r\n\t\thandleMarkers();\r\n\t\tbtnStart.addEventListener('click', start);\r\n\r\n\t\twindow.addEventListener('resize', setInitialButtonPos);\r\n\t\tsetInitialButtonPos();\r\n\r\n\t}\r\n\r\n\tconst setInitialButtonPos = () => {\r\n\t\tconst mq = window.matchMedia('(min-width: 801px)');\r\n\t\tdocument.querySelectorAll('.eye').forEach((eye, i) => {\r\n\t\t\teye.setAttribute('transform', `translate(${window.innerWidth / 2}, ${window.innerHeight / 2 + 50})`);\r\n\t\t});\r\n\t}\r\n\r\n\tconst start = (e) => {\r\n\t\ttopLayer.classList.add('started');\r\n\t\tholeLayer.classList.add('started');\r\n\t\tbtnStart.classList.add('started');\r\n\t\tsmooth = new Smooth(popup, layerObjects);\r\n\t\tpopup.setSmooth(smooth);\r\n\t\tconst mq = window.matchMedia('(min-width: 801px)');\r\n\t\tif (mq.matches) {\r\n\t\t\tcursor.style.transform = `translate3d(${e.clientX}px, ${e.clientY}px, 0)`;\r\n\t\t\tsmooth.on();\r\n\t\t\tanime({\r\n\t\t\t\ttargets: '#hole .eye',\r\n\t\t\t\twidth: 350,\r\n\t\t\t\theight: 350,\r\n\t\t\t\trx: 175,\r\n\t\t\t\tx: -175,\r\n\t\t\t\ty: -175,\r\n\t\t\t\tduration: 300,\r\n\t\t\t\teasing: 'easeInOutBack',\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tsmooth.onMobile();\r\n\t\t\tanime({\r\n\t\t\t\ttargets: '#hole .eye',\r\n\t\t\t\twidth: 300,\r\n\t\t\t\theight: 300,\r\n\t\t\t\trx: 150,\r\n\t\t\t\tx: -150,\r\n\t\t\t\ty: -150,\r\n\t\t\t\tduration: 300,\r\n\t\t\t\teasing: 'easeInOutBack',\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleMarkers = () => {\r\n\t\tconst layers = coverSvgLayer.querySelectorAll('.layer');\r\n\t\tconst lang = document.getElementsByTagName('html')[0].getAttribute('lang');\r\n\r\n\t\tif (lang == \"nl\") {\r\n\t\t\tlayers.forEach(layer => {\r\n\t\t\t\tlayerObjects.push(new Layer(layer, cursor, dataNl, popup));\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (lang == \"fr\") {\r\n\t\t\tlayers.forEach(layer => {\r\n\t\t\t\tlayerObjects.push(new Layer(layer, cursor, dataFr, popup));\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconst initMobileControls = () => {\r\n\t\t// mobile controls\r\n\t\tlet last_x = 0;\r\n\t\tlet last_y = 0;\r\n\t\tconst mc = new Hammmer.Manager(body);\r\n\t\tmc.add(new Hammmer.Pan({\r\n\t\t\tthreshold: 0,\r\n\t\t\tpointers: 0\r\n\t\t}));\r\n\t\tmc.on('panmove panend', onPan);\r\n\r\n\t\tfunction onPan(e) {\r\n\t\t\tif (e.type === 'panmove') {\r\n\t\t\t\t// console.log(e.deltaX, e.deltaY);\r\n\t\t\t\tpos = {\r\n\t\t\t\t\tx: last_x + e.deltaX,\r\n\t\t\t\t\ty: last_y + e.deltaY,\r\n\t\t\t\t}\r\n\t\t\t\tconst value = `translate3d(${pos.x}px, ${pos.y}px, 0px)`;\r\n\t\t\t\tsmoothLayer.style.webkitTransform = value;\r\n\t\t\t\tsmoothLayer.style.mozTransform = value;\r\n\t\t\t\tsmoothLayer.style.transform = value;\r\n\t\t\t}\r\n\r\n\t\t\tlayerObjects.forEach(layer => {\r\n\t\t\t\tlayer.buttons.forEach(btn => {\r\n\t\t\t\t\tconst pos = btn.getBoundingClientRect();\r\n\t\t\t\t\tconst dist = Math.sqrt(Math.pow(Math.abs(center.x - pos.left), 2) + Math.pow(Math.abs(center.y - pos.top), 2));\r\n\t\t\t\t\t// const dist = Math.hypot(center.x - pos.left, center.y - center.top);\r\n\t\t\t\t\tif (dist < 120) {\r\n\t\t\t\t\t\tbtn.classList.add('show');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbtn.classList.remove('show');\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tif (e.type === 'panend') {\r\n\t\t\t\tlast_x = pos.x;\r\n\t\t\t\tlast_y = pos.y;\r\n\t\t\t\tconsole.log(last_x, last_y);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tinit();\r\n});","/*\n * anime.js v3.1.0\n * (c) 2019 Julian Garnier\n * Released under the MIT license\n * animejs.com\n */\n\n'use strict';\n\n// Defaults\n\nvar defaultInstanceSettings = {\n  update: null,\n  begin: null,\n  loopBegin: null,\n  changeBegin: null,\n  change: null,\n  changeComplete: null,\n  loopComplete: null,\n  complete: null,\n  loop: 1,\n  direction: 'normal',\n  autoplay: true,\n  timelineOffset: 0\n};\n\nvar defaultTweenSettings = {\n  duration: 1000,\n  delay: 0,\n  endDelay: 0,\n  easing: 'easeOutElastic(1, .5)',\n  round: 0\n};\n\nvar validTransforms = ['translateX', 'translateY', 'translateZ', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'skew', 'skewX', 'skewY', 'perspective'];\n\n// Caching\n\nvar cache = {\n  CSS: {},\n  springs: {}\n};\n\n// Utils\n\nfunction minMax(val, min, max) {\n  return Math.min(Math.max(val, min), max);\n}\n\nfunction stringContains(str, text) {\n  return str.indexOf(text) > -1;\n}\n\nfunction applyArguments(func, args) {\n  return func.apply(null, args);\n}\n\nvar is = {\n  arr: function (a) { return Array.isArray(a); },\n  obj: function (a) { return stringContains(Object.prototype.toString.call(a), 'Object'); },\n  pth: function (a) { return is.obj(a) && a.hasOwnProperty('totalLength'); },\n  svg: function (a) { return a instanceof SVGElement; },\n  inp: function (a) { return a instanceof HTMLInputElement; },\n  dom: function (a) { return a.nodeType || is.svg(a); },\n  str: function (a) { return typeof a === 'string'; },\n  fnc: function (a) { return typeof a === 'function'; },\n  und: function (a) { return typeof a === 'undefined'; },\n  hex: function (a) { return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a); },\n  rgb: function (a) { return /^rgb/.test(a); },\n  hsl: function (a) { return /^hsl/.test(a); },\n  col: function (a) { return (is.hex(a) || is.rgb(a) || is.hsl(a)); },\n  key: function (a) { return !defaultInstanceSettings.hasOwnProperty(a) && !defaultTweenSettings.hasOwnProperty(a) && a !== 'targets' && a !== 'keyframes'; }\n};\n\n// Easings\n\nfunction parseEasingParameters(string) {\n  var match = /\\(([^)]+)\\)/.exec(string);\n  return match ? match[1].split(',').map(function (p) { return parseFloat(p); }) : [];\n}\n\n// Spring solver inspired by Webkit Copyright © 2016 Apple Inc. All rights reserved. https://webkit.org/demos/spring/spring.js\n\nfunction spring(string, duration) {\n\n  var params = parseEasingParameters(string);\n  var mass = minMax(is.und(params[0]) ? 1 : params[0], .1, 100);\n  var stiffness = minMax(is.und(params[1]) ? 100 : params[1], .1, 100);\n  var damping = minMax(is.und(params[2]) ? 10 : params[2], .1, 100);\n  var velocity =  minMax(is.und(params[3]) ? 0 : params[3], .1, 100);\n  var w0 = Math.sqrt(stiffness / mass);\n  var zeta = damping / (2 * Math.sqrt(stiffness * mass));\n  var wd = zeta < 1 ? w0 * Math.sqrt(1 - zeta * zeta) : 0;\n  var a = 1;\n  var b = zeta < 1 ? (zeta * w0 + -velocity) / wd : -velocity + w0;\n\n  function solver(t) {\n    var progress = duration ? (duration * t) / 1000 : t;\n    if (zeta < 1) {\n      progress = Math.exp(-progress * zeta * w0) * (a * Math.cos(wd * progress) + b * Math.sin(wd * progress));\n    } else {\n      progress = (a + b * progress) * Math.exp(-progress * w0);\n    }\n    if (t === 0 || t === 1) { return t; }\n    return 1 - progress;\n  }\n\n  function getDuration() {\n    var cached = cache.springs[string];\n    if (cached) { return cached; }\n    var frame = 1/6;\n    var elapsed = 0;\n    var rest = 0;\n    while(true) {\n      elapsed += frame;\n      if (solver(elapsed) === 1) {\n        rest++;\n        if (rest >= 16) { break; }\n      } else {\n        rest = 0;\n      }\n    }\n    var duration = elapsed * frame * 1000;\n    cache.springs[string] = duration;\n    return duration;\n  }\n\n  return duration ? solver : getDuration;\n\n}\n\n// Basic steps easing implementation https://developer.mozilla.org/fr/docs/Web/CSS/transition-timing-function\n\nfunction steps(steps) {\n  if ( steps === void 0 ) steps = 10;\n\n  return function (t) { return Math.round(t * steps) * (1 / steps); };\n}\n\n// BezierEasing https://github.com/gre/bezier-easing\n\nvar bezier = (function () {\n\n  var kSplineTableSize = 11;\n  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\n  function A(aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1 }\n  function B(aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1 }\n  function C(aA1)      { return 3.0 * aA1 }\n\n  function calcBezier(aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT }\n  function getSlope(aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1) }\n\n  function binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX, currentT, i = 0;\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n      if (currentX > 0.0) { aB = currentT; } else { aA = currentT; }\n    } while (Math.abs(currentX) > 0.0000001 && ++i < 10);\n    return currentT;\n  }\n\n  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (var i = 0; i < 4; ++i) {\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\n      if (currentSlope === 0.0) { return aGuessT; }\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n\n  function bezier(mX1, mY1, mX2, mY2) {\n\n    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) { return; }\n    var sampleValues = new Float32Array(kSplineTableSize);\n\n    if (mX1 !== mY1 || mX2 !== mY2) {\n      for (var i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n      }\n    }\n\n    function getTForX(aX) {\n\n      var intervalStart = 0;\n      var currentSample = 1;\n      var lastSample = kSplineTableSize - 1;\n\n      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n        intervalStart += kSampleStepSize;\n      }\n\n      --currentSample;\n\n      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n      var guessForT = intervalStart + dist * kSampleStepSize;\n      var initialSlope = getSlope(guessForT, mX1, mX2);\n\n      if (initialSlope >= 0.001) {\n        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n      } else if (initialSlope === 0.0) {\n        return guessForT;\n      } else {\n        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n      }\n\n    }\n\n    return function (x) {\n      if (mX1 === mY1 && mX2 === mY2) { return x; }\n      if (x === 0 || x === 1) { return x; }\n      return calcBezier(getTForX(x), mY1, mY2);\n    }\n\n  }\n\n  return bezier;\n\n})();\n\nvar penner = (function () {\n\n  // Based on jQuery UI's implemenation of easing equations from Robert Penner (http://www.robertpenner.com/easing)\n\n  var eases = { linear: function () { return function (t) { return t; }; } };\n\n  var functionEasings = {\n    Sine: function () { return function (t) { return 1 - Math.cos(t * Math.PI / 2); }; },\n    Circ: function () { return function (t) { return 1 - Math.sqrt(1 - t * t); }; },\n    Back: function () { return function (t) { return t * t * (3 * t - 2); }; },\n    Bounce: function () { return function (t) {\n      var pow2, b = 4;\n      while (t < (( pow2 = Math.pow(2, --b)) - 1) / 11) {}\n      return 1 / Math.pow(4, 3 - b) - 7.5625 * Math.pow(( pow2 * 3 - 2 ) / 22 - t, 2)\n    }; },\n    Elastic: function (amplitude, period) {\n      if ( amplitude === void 0 ) amplitude = 1;\n      if ( period === void 0 ) period = .5;\n\n      var a = minMax(amplitude, 1, 10);\n      var p = minMax(period, .1, 2);\n      return function (t) {\n        return (t === 0 || t === 1) ? t : \n          -a * Math.pow(2, 10 * (t - 1)) * Math.sin((((t - 1) - (p / (Math.PI * 2) * Math.asin(1 / a))) * (Math.PI * 2)) / p);\n      }\n    }\n  };\n\n  var baseEasings = ['Quad', 'Cubic', 'Quart', 'Quint', 'Expo'];\n\n  baseEasings.forEach(function (name, i) {\n    functionEasings[name] = function () { return function (t) { return Math.pow(t, i + 2); }; };\n  });\n\n  Object.keys(functionEasings).forEach(function (name) {\n    var easeIn = functionEasings[name];\n    eases['easeIn' + name] = easeIn;\n    eases['easeOut' + name] = function (a, b) { return function (t) { return 1 - easeIn(a, b)(1 - t); }; };\n    eases['easeInOut' + name] = function (a, b) { return function (t) { return t < 0.5 ? easeIn(a, b)(t * 2) / 2 : \n      1 - easeIn(a, b)(t * -2 + 2) / 2; }; };\n  });\n\n  return eases;\n\n})();\n\nfunction parseEasings(easing, duration) {\n  if (is.fnc(easing)) { return easing; }\n  var name = easing.split('(')[0];\n  var ease = penner[name];\n  var args = parseEasingParameters(easing);\n  switch (name) {\n    case 'spring' : return spring(easing, duration);\n    case 'cubicBezier' : return applyArguments(bezier, args);\n    case 'steps' : return applyArguments(steps, args);\n    default : return applyArguments(ease, args);\n  }\n}\n\n// Strings\n\nfunction selectString(str) {\n  try {\n    var nodes = document.querySelectorAll(str);\n    return nodes;\n  } catch(e) {\n    return;\n  }\n}\n\n// Arrays\n\nfunction filterArray(arr, callback) {\n  var len = arr.length;\n  var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n  var result = [];\n  for (var i = 0; i < len; i++) {\n    if (i in arr) {\n      var val = arr[i];\n      if (callback.call(thisArg, val, i, arr)) {\n        result.push(val);\n      }\n    }\n  }\n  return result;\n}\n\nfunction flattenArray(arr) {\n  return arr.reduce(function (a, b) { return a.concat(is.arr(b) ? flattenArray(b) : b); }, []);\n}\n\nfunction toArray(o) {\n  if (is.arr(o)) { return o; }\n  if (is.str(o)) { o = selectString(o) || o; }\n  if (o instanceof NodeList || o instanceof HTMLCollection) { return [].slice.call(o); }\n  return [o];\n}\n\nfunction arrayContains(arr, val) {\n  return arr.some(function (a) { return a === val; });\n}\n\n// Objects\n\nfunction cloneObject(o) {\n  var clone = {};\n  for (var p in o) { clone[p] = o[p]; }\n  return clone;\n}\n\nfunction replaceObjectProps(o1, o2) {\n  var o = cloneObject(o1);\n  for (var p in o1) { o[p] = o2.hasOwnProperty(p) ? o2[p] : o1[p]; }\n  return o;\n}\n\nfunction mergeObjects(o1, o2) {\n  var o = cloneObject(o1);\n  for (var p in o2) { o[p] = is.und(o1[p]) ? o2[p] : o1[p]; }\n  return o;\n}\n\n// Colors\n\nfunction rgbToRgba(rgbValue) {\n  var rgb = /rgb\\((\\d+,\\s*[\\d]+,\\s*[\\d]+)\\)/g.exec(rgbValue);\n  return rgb ? (\"rgba(\" + (rgb[1]) + \",1)\") : rgbValue;\n}\n\nfunction hexToRgba(hexValue) {\n  var rgx = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  var hex = hexValue.replace(rgx, function (m, r, g, b) { return r + r + g + g + b + b; } );\n  var rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  var r = parseInt(rgb[1], 16);\n  var g = parseInt(rgb[2], 16);\n  var b = parseInt(rgb[3], 16);\n  return (\"rgba(\" + r + \",\" + g + \",\" + b + \",1)\");\n}\n\nfunction hslToRgba(hslValue) {\n  var hsl = /hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)/g.exec(hslValue) || /hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%,\\s*([\\d.]+)\\)/g.exec(hslValue);\n  var h = parseInt(hsl[1], 10) / 360;\n  var s = parseInt(hsl[2], 10) / 100;\n  var l = parseInt(hsl[3], 10) / 100;\n  var a = hsl[4] || 1;\n  function hue2rgb(p, q, t) {\n    if (t < 0) { t += 1; }\n    if (t > 1) { t -= 1; }\n    if (t < 1/6) { return p + (q - p) * 6 * t; }\n    if (t < 1/2) { return q; }\n    if (t < 2/3) { return p + (q - p) * (2/3 - t) * 6; }\n    return p;\n  }\n  var r, g, b;\n  if (s == 0) {\n    r = g = b = l;\n  } else {\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1/3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1/3);\n  }\n  return (\"rgba(\" + (r * 255) + \",\" + (g * 255) + \",\" + (b * 255) + \",\" + a + \")\");\n}\n\nfunction colorToRgb(val) {\n  if (is.rgb(val)) { return rgbToRgba(val); }\n  if (is.hex(val)) { return hexToRgba(val); }\n  if (is.hsl(val)) { return hslToRgba(val); }\n}\n\n// Units\n\nfunction getUnit(val) {\n  var split = /[+-]?\\d*\\.?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(val);\n  if (split) { return split[1]; }\n}\n\nfunction getTransformUnit(propName) {\n  if (stringContains(propName, 'translate') || propName === 'perspective') { return 'px'; }\n  if (stringContains(propName, 'rotate') || stringContains(propName, 'skew')) { return 'deg'; }\n}\n\n// Values\n\nfunction getFunctionValue(val, animatable) {\n  if (!is.fnc(val)) { return val; }\n  return val(animatable.target, animatable.id, animatable.total);\n}\n\nfunction getAttribute(el, prop) {\n  return el.getAttribute(prop);\n}\n\nfunction convertPxToUnit(el, value, unit) {\n  var valueUnit = getUnit(value);\n  if (arrayContains([unit, 'deg', 'rad', 'turn'], valueUnit)) { return value; }\n  var cached = cache.CSS[value + unit];\n  if (!is.und(cached)) { return cached; }\n  var baseline = 100;\n  var tempEl = document.createElement(el.tagName);\n  var parentEl = (el.parentNode && (el.parentNode !== document)) ? el.parentNode : document.body;\n  parentEl.appendChild(tempEl);\n  tempEl.style.position = 'absolute';\n  tempEl.style.width = baseline + unit;\n  var factor = baseline / tempEl.offsetWidth;\n  parentEl.removeChild(tempEl);\n  var convertedUnit = factor * parseFloat(value);\n  cache.CSS[value + unit] = convertedUnit;\n  return convertedUnit;\n}\n\nfunction getCSSValue(el, prop, unit) {\n  if (prop in el.style) {\n    var uppercasePropName = prop.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    var value = el.style[prop] || getComputedStyle(el).getPropertyValue(uppercasePropName) || '0';\n    return unit ? convertPxToUnit(el, value, unit) : value;\n  }\n}\n\nfunction getAnimationType(el, prop) {\n  if (is.dom(el) && !is.inp(el) && (getAttribute(el, prop) || (is.svg(el) && el[prop]))) { return 'attribute'; }\n  if (is.dom(el) && arrayContains(validTransforms, prop)) { return 'transform'; }\n  if (is.dom(el) && (prop !== 'transform' && getCSSValue(el, prop))) { return 'css'; }\n  if (el[prop] != null) { return 'object'; }\n}\n\nfunction getElementTransforms(el) {\n  if (!is.dom(el)) { return; }\n  var str = el.style.transform || '';\n  var reg  = /(\\w+)\\(([^)]*)\\)/g;\n  var transforms = new Map();\n  var m; while (m = reg.exec(str)) { transforms.set(m[1], m[2]); }\n  return transforms;\n}\n\nfunction getTransformValue(el, propName, animatable, unit) {\n  var defaultVal = stringContains(propName, 'scale') ? 1 : 0 + getTransformUnit(propName);\n  var value = getElementTransforms(el).get(propName) || defaultVal;\n  if (animatable) {\n    animatable.transforms.list.set(propName, value);\n    animatable.transforms['last'] = propName;\n  }\n  return unit ? convertPxToUnit(el, value, unit) : value;\n}\n\nfunction getOriginalTargetValue(target, propName, unit, animatable) {\n  switch (getAnimationType(target, propName)) {\n    case 'transform': return getTransformValue(target, propName, animatable, unit);\n    case 'css': return getCSSValue(target, propName, unit);\n    case 'attribute': return getAttribute(target, propName);\n    default: return target[propName] || 0;\n  }\n}\n\nfunction getRelativeValue(to, from) {\n  var operator = /^(\\*=|\\+=|-=)/.exec(to);\n  if (!operator) { return to; }\n  var u = getUnit(to) || 0;\n  var x = parseFloat(from);\n  var y = parseFloat(to.replace(operator[0], ''));\n  switch (operator[0][0]) {\n    case '+': return x + y + u;\n    case '-': return x - y + u;\n    case '*': return x * y + u;\n  }\n}\n\nfunction validateValue(val, unit) {\n  if (is.col(val)) { return colorToRgb(val); }\n  if (/\\s/g.test(val)) { return val; }\n  var originalUnit = getUnit(val);\n  var unitLess = originalUnit ? val.substr(0, val.length - originalUnit.length) : val;\n  if (unit) { return unitLess + unit; }\n  return unitLess;\n}\n\n// getTotalLength() equivalent for circle, rect, polyline, polygon and line shapes\n// adapted from https://gist.github.com/SebLambla/3e0550c496c236709744\n\nfunction getDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\n\nfunction getCircleLength(el) {\n  return Math.PI * 2 * getAttribute(el, 'r');\n}\n\nfunction getRectLength(el) {\n  return (getAttribute(el, 'width') * 2) + (getAttribute(el, 'height') * 2);\n}\n\nfunction getLineLength(el) {\n  return getDistance(\n    {x: getAttribute(el, 'x1'), y: getAttribute(el, 'y1')}, \n    {x: getAttribute(el, 'x2'), y: getAttribute(el, 'y2')}\n  );\n}\n\nfunction getPolylineLength(el) {\n  var points = el.points;\n  var totalLength = 0;\n  var previousPos;\n  for (var i = 0 ; i < points.numberOfItems; i++) {\n    var currentPos = points.getItem(i);\n    if (i > 0) { totalLength += getDistance(previousPos, currentPos); }\n    previousPos = currentPos;\n  }\n  return totalLength;\n}\n\nfunction getPolygonLength(el) {\n  var points = el.points;\n  return getPolylineLength(el) + getDistance(points.getItem(points.numberOfItems - 1), points.getItem(0));\n}\n\n// Path animation\n\nfunction getTotalLength(el) {\n  if (el.getTotalLength) { return el.getTotalLength(); }\n  switch(el.tagName.toLowerCase()) {\n    case 'circle': return getCircleLength(el);\n    case 'rect': return getRectLength(el);\n    case 'line': return getLineLength(el);\n    case 'polyline': return getPolylineLength(el);\n    case 'polygon': return getPolygonLength(el);\n  }\n}\n\nfunction setDashoffset(el) {\n  var pathLength = getTotalLength(el);\n  el.setAttribute('stroke-dasharray', pathLength);\n  return pathLength;\n}\n\n// Motion path\n\nfunction getParentSvgEl(el) {\n  var parentEl = el.parentNode;\n  while (is.svg(parentEl)) {\n    if (!is.svg(parentEl.parentNode)) { break; }\n    parentEl = parentEl.parentNode;\n  }\n  return parentEl;\n}\n\nfunction getParentSvg(pathEl, svgData) {\n  var svg = svgData || {};\n  var parentSvgEl = svg.el || getParentSvgEl(pathEl);\n  var rect = parentSvgEl.getBoundingClientRect();\n  var viewBoxAttr = getAttribute(parentSvgEl, 'viewBox');\n  var width = rect.width;\n  var height = rect.height;\n  var viewBox = svg.viewBox || (viewBoxAttr ? viewBoxAttr.split(' ') : [0, 0, width, height]);\n  return {\n    el: parentSvgEl,\n    viewBox: viewBox,\n    x: viewBox[0] / 1,\n    y: viewBox[1] / 1,\n    w: width / viewBox[2],\n    h: height / viewBox[3]\n  }\n}\n\nfunction getPath(path, percent) {\n  var pathEl = is.str(path) ? selectString(path)[0] : path;\n  var p = percent || 100;\n  return function(property) {\n    return {\n      property: property,\n      el: pathEl,\n      svg: getParentSvg(pathEl),\n      totalLength: getTotalLength(pathEl) * (p / 100)\n    }\n  }\n}\n\nfunction getPathProgress(path, progress) {\n  function point(offset) {\n    if ( offset === void 0 ) offset = 0;\n\n    var l = progress + offset >= 1 ? progress + offset : 0;\n    return path.el.getPointAtLength(l);\n  }\n  var svg = getParentSvg(path.el, path.svg);\n  var p = point();\n  var p0 = point(-1);\n  var p1 = point(+1);\n  switch (path.property) {\n    case 'x': return (p.x - svg.x) * svg.w;\n    case 'y': return (p.y - svg.y) * svg.h;\n    case 'angle': return Math.atan2(p1.y - p0.y, p1.x - p0.x) * 180 / Math.PI;\n  }\n}\n\n// Decompose value\n\nfunction decomposeValue(val, unit) {\n  // const rgx = /-?\\d*\\.?\\d+/g; // handles basic numbers\n  // const rgx = /[+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?/g; // handles exponents notation\n  var rgx = /[+-]?\\d*\\.?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?/g; // handles exponents notation\n  var value = validateValue((is.pth(val) ? val.totalLength : val), unit) + '';\n  return {\n    original: value,\n    numbers: value.match(rgx) ? value.match(rgx).map(Number) : [0],\n    strings: (is.str(val) || unit) ? value.split(rgx) : []\n  }\n}\n\n// Animatables\n\nfunction parseTargets(targets) {\n  var targetsArray = targets ? (flattenArray(is.arr(targets) ? targets.map(toArray) : toArray(targets))) : [];\n  return filterArray(targetsArray, function (item, pos, self) { return self.indexOf(item) === pos; });\n}\n\nfunction getAnimatables(targets) {\n  var parsed = parseTargets(targets);\n  return parsed.map(function (t, i) {\n    return {target: t, id: i, total: parsed.length, transforms: { list: getElementTransforms(t) } };\n  });\n}\n\n// Properties\n\nfunction normalizePropertyTweens(prop, tweenSettings) {\n  var settings = cloneObject(tweenSettings);\n  // Override duration if easing is a spring\n  if (/^spring/.test(settings.easing)) { settings.duration = spring(settings.easing); }\n  if (is.arr(prop)) {\n    var l = prop.length;\n    var isFromTo = (l === 2 && !is.obj(prop[0]));\n    if (!isFromTo) {\n      // Duration divided by the number of tweens\n      if (!is.fnc(tweenSettings.duration)) { settings.duration = tweenSettings.duration / l; }\n    } else {\n      // Transform [from, to] values shorthand to a valid tween value\n      prop = {value: prop};\n    }\n  }\n  var propArray = is.arr(prop) ? prop : [prop];\n  return propArray.map(function (v, i) {\n    var obj = (is.obj(v) && !is.pth(v)) ? v : {value: v};\n    // Default delay value should only be applied to the first tween\n    if (is.und(obj.delay)) { obj.delay = !i ? tweenSettings.delay : 0; }\n    // Default endDelay value should only be applied to the last tween\n    if (is.und(obj.endDelay)) { obj.endDelay = i === propArray.length - 1 ? tweenSettings.endDelay : 0; }\n    return obj;\n  }).map(function (k) { return mergeObjects(k, settings); });\n}\n\n\nfunction flattenKeyframes(keyframes) {\n  var propertyNames = filterArray(flattenArray(keyframes.map(function (key) { return Object.keys(key); })), function (p) { return is.key(p); })\n  .reduce(function (a,b) { if (a.indexOf(b) < 0) { a.push(b); } return a; }, []);\n  var properties = {};\n  var loop = function ( i ) {\n    var propName = propertyNames[i];\n    properties[propName] = keyframes.map(function (key) {\n      var newKey = {};\n      for (var p in key) {\n        if (is.key(p)) {\n          if (p == propName) { newKey.value = key[p]; }\n        } else {\n          newKey[p] = key[p];\n        }\n      }\n      return newKey;\n    });\n  };\n\n  for (var i = 0; i < propertyNames.length; i++) loop( i );\n  return properties;\n}\n\nfunction getProperties(tweenSettings, params) {\n  var properties = [];\n  var keyframes = params.keyframes;\n  if (keyframes) { params = mergeObjects(flattenKeyframes(keyframes), params); }\n  for (var p in params) {\n    if (is.key(p)) {\n      properties.push({\n        name: p,\n        tweens: normalizePropertyTweens(params[p], tweenSettings)\n      });\n    }\n  }\n  return properties;\n}\n\n// Tweens\n\nfunction normalizeTweenValues(tween, animatable) {\n  var t = {};\n  for (var p in tween) {\n    var value = getFunctionValue(tween[p], animatable);\n    if (is.arr(value)) {\n      value = value.map(function (v) { return getFunctionValue(v, animatable); });\n      if (value.length === 1) { value = value[0]; }\n    }\n    t[p] = value;\n  }\n  t.duration = parseFloat(t.duration);\n  t.delay = parseFloat(t.delay);\n  return t;\n}\n\nfunction normalizeTweens(prop, animatable) {\n  var previousTween;\n  return prop.tweens.map(function (t) {\n    var tween = normalizeTweenValues(t, animatable);\n    var tweenValue = tween.value;\n    var to = is.arr(tweenValue) ? tweenValue[1] : tweenValue;\n    var toUnit = getUnit(to);\n    var originalValue = getOriginalTargetValue(animatable.target, prop.name, toUnit, animatable);\n    var previousValue = previousTween ? previousTween.to.original : originalValue;\n    var from = is.arr(tweenValue) ? tweenValue[0] : previousValue;\n    var fromUnit = getUnit(from) || getUnit(originalValue);\n    var unit = toUnit || fromUnit;\n    if (is.und(to)) { to = previousValue; }\n    tween.from = decomposeValue(from, unit);\n    tween.to = decomposeValue(getRelativeValue(to, from), unit);\n    tween.start = previousTween ? previousTween.end : 0;\n    tween.end = tween.start + tween.delay + tween.duration + tween.endDelay;\n    tween.easing = parseEasings(tween.easing, tween.duration);\n    tween.isPath = is.pth(tweenValue);\n    tween.isColor = is.col(tween.from.original);\n    if (tween.isColor) { tween.round = 1; }\n    previousTween = tween;\n    return tween;\n  });\n}\n\n// Tween progress\n\nvar setProgressValue = {\n  css: function (t, p, v) { return t.style[p] = v; },\n  attribute: function (t, p, v) { return t.setAttribute(p, v); },\n  object: function (t, p, v) { return t[p] = v; },\n  transform: function (t, p, v, transforms, manual) {\n    transforms.list.set(p, v);\n    if (p === transforms.last || manual) {\n      var str = '';\n      transforms.list.forEach(function (value, prop) { str += prop + \"(\" + value + \") \"; });\n      t.style.transform = str;\n    }\n  }\n};\n\n// Set Value helper\n\nfunction setTargetsValue(targets, properties) {\n  var animatables = getAnimatables(targets);\n  animatables.forEach(function (animatable) {\n    for (var property in properties) {\n      var value = getFunctionValue(properties[property], animatable);\n      var target = animatable.target;\n      var valueUnit = getUnit(value);\n      var originalValue = getOriginalTargetValue(target, property, valueUnit, animatable);\n      var unit = valueUnit || getUnit(originalValue);\n      var to = getRelativeValue(validateValue(value, unit), originalValue);\n      var animType = getAnimationType(target, property);\n      setProgressValue[animType](target, property, to, animatable.transforms, true);\n    }\n  });\n}\n\n// Animations\n\nfunction createAnimation(animatable, prop) {\n  var animType = getAnimationType(animatable.target, prop.name);\n  if (animType) {\n    var tweens = normalizeTweens(prop, animatable);\n    var lastTween = tweens[tweens.length - 1];\n    return {\n      type: animType,\n      property: prop.name,\n      animatable: animatable,\n      tweens: tweens,\n      duration: lastTween.end,\n      delay: tweens[0].delay,\n      endDelay: lastTween.endDelay\n    }\n  }\n}\n\nfunction getAnimations(animatables, properties) {\n  return filterArray(flattenArray(animatables.map(function (animatable) {\n    return properties.map(function (prop) {\n      return createAnimation(animatable, prop);\n    });\n  })), function (a) { return !is.und(a); });\n}\n\n// Create Instance\n\nfunction getInstanceTimings(animations, tweenSettings) {\n  var animLength = animations.length;\n  var getTlOffset = function (anim) { return anim.timelineOffset ? anim.timelineOffset : 0; };\n  var timings = {};\n  timings.duration = animLength ? Math.max.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.duration; })) : tweenSettings.duration;\n  timings.delay = animLength ? Math.min.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.delay; })) : tweenSettings.delay;\n  timings.endDelay = animLength ? timings.duration - Math.max.apply(Math, animations.map(function (anim) { return getTlOffset(anim) + anim.duration - anim.endDelay; })) : tweenSettings.endDelay;\n  return timings;\n}\n\nvar instanceID = 0;\n\nfunction createNewInstance(params) {\n  var instanceSettings = replaceObjectProps(defaultInstanceSettings, params);\n  var tweenSettings = replaceObjectProps(defaultTweenSettings, params);\n  var properties = getProperties(tweenSettings, params);\n  var animatables = getAnimatables(params.targets);\n  var animations = getAnimations(animatables, properties);\n  var timings = getInstanceTimings(animations, tweenSettings);\n  var id = instanceID;\n  instanceID++;\n  return mergeObjects(instanceSettings, {\n    id: id,\n    children: [],\n    animatables: animatables,\n    animations: animations,\n    duration: timings.duration,\n    delay: timings.delay,\n    endDelay: timings.endDelay\n  });\n}\n\n// Core\n\nvar activeInstances = [];\nvar pausedInstances = [];\nvar raf;\n\nvar engine = (function () {\n  function play() { \n    raf = requestAnimationFrame(step);\n  }\n  function step(t) {\n    var activeInstancesLength = activeInstances.length;\n    if (activeInstancesLength) {\n      var i = 0;\n      while (i < activeInstancesLength) {\n        var activeInstance = activeInstances[i];\n        if (!activeInstance.paused) {\n          activeInstance.tick(t);\n        } else {\n          var instanceIndex = activeInstances.indexOf(activeInstance);\n          if (instanceIndex > -1) {\n            activeInstances.splice(instanceIndex, 1);\n            activeInstancesLength = activeInstances.length;\n          }\n        }\n        i++;\n      }\n      play();\n    } else {\n      raf = cancelAnimationFrame(raf);\n    }\n  }\n  return play;\n})();\n\nfunction handleVisibilityChange() {\n  if (document.hidden) {\n    activeInstances.forEach(function (ins) { return ins.pause(); });\n    pausedInstances = activeInstances.slice(0);\n    anime.running = activeInstances = [];\n  } else {\n    pausedInstances.forEach(function (ins) { return ins.play(); });\n  }\n}\n\nif (typeof document !== 'undefined') {\n  document.addEventListener('visibilitychange', handleVisibilityChange);\n}\n\n// Public Instance\n\nfunction anime(params) {\n  if ( params === void 0 ) params = {};\n\n\n  var startTime = 0, lastTime = 0, now = 0;\n  var children, childrenLength = 0;\n  var resolve = null;\n\n  function makePromise(instance) {\n    var promise = window.Promise && new Promise(function (_resolve) { return resolve = _resolve; });\n    instance.finished = promise;\n    return promise;\n  }\n\n  var instance = createNewInstance(params);\n  var promise = makePromise(instance);\n\n  function toggleInstanceDirection() {\n    var direction = instance.direction;\n    if (direction !== 'alternate') {\n      instance.direction = direction !== 'normal' ? 'normal' : 'reverse';\n    }\n    instance.reversed = !instance.reversed;\n    children.forEach(function (child) { return child.reversed = instance.reversed; });\n  }\n\n  function adjustTime(time) {\n    return instance.reversed ? instance.duration - time : time;\n  }\n\n  function resetTime() {\n    startTime = 0;\n    lastTime = adjustTime(instance.currentTime) * (1 / anime.speed);\n  }\n\n  function seekChild(time, child) {\n    if (child) { child.seek(time - child.timelineOffset); }\n  }\n\n  function syncInstanceChildren(time) {\n    if (!instance.reversePlayback) {\n      for (var i = 0; i < childrenLength; i++) { seekChild(time, children[i]); }\n    } else {\n      for (var i$1 = childrenLength; i$1--;) { seekChild(time, children[i$1]); }\n    }\n  }\n\n  function setAnimationsProgress(insTime) {\n    var i = 0;\n    var animations = instance.animations;\n    var animationsLength = animations.length;\n    while (i < animationsLength) {\n      var anim = animations[i];\n      var animatable = anim.animatable;\n      var tweens = anim.tweens;\n      var tweenLength = tweens.length - 1;\n      var tween = tweens[tweenLength];\n      // Only check for keyframes if there is more than one tween\n      if (tweenLength) { tween = filterArray(tweens, function (t) { return (insTime < t.end); })[0] || tween; }\n      var elapsed = minMax(insTime - tween.start - tween.delay, 0, tween.duration) / tween.duration;\n      var eased = isNaN(elapsed) ? 1 : tween.easing(elapsed);\n      var strings = tween.to.strings;\n      var round = tween.round;\n      var numbers = [];\n      var toNumbersLength = tween.to.numbers.length;\n      var progress = (void 0);\n      for (var n = 0; n < toNumbersLength; n++) {\n        var value = (void 0);\n        var toNumber = tween.to.numbers[n];\n        var fromNumber = tween.from.numbers[n] || 0;\n        if (!tween.isPath) {\n          value = fromNumber + (eased * (toNumber - fromNumber));\n        } else {\n          value = getPathProgress(tween.value, eased * toNumber);\n        }\n        if (round) {\n          if (!(tween.isColor && n > 2)) {\n            value = Math.round(value * round) / round;\n          }\n        }\n        numbers.push(value);\n      }\n      // Manual Array.reduce for better performances\n      var stringsLength = strings.length;\n      if (!stringsLength) {\n        progress = numbers[0];\n      } else {\n        progress = strings[0];\n        for (var s = 0; s < stringsLength; s++) {\n          var a = strings[s];\n          var b = strings[s + 1];\n          var n$1 = numbers[s];\n          if (!isNaN(n$1)) {\n            if (!b) {\n              progress += n$1 + ' ';\n            } else {\n              progress += n$1 + b;\n            }\n          }\n        }\n      }\n      setProgressValue[anim.type](animatable.target, anim.property, progress, animatable.transforms);\n      anim.currentValue = progress;\n      i++;\n    }\n  }\n\n  function setCallback(cb) {\n    if (instance[cb] && !instance.passThrough) { instance[cb](instance); }\n  }\n\n  function countIteration() {\n    if (instance.remaining && instance.remaining !== true) {\n      instance.remaining--;\n    }\n  }\n\n  function setInstanceProgress(engineTime) {\n    var insDuration = instance.duration;\n    var insDelay = instance.delay;\n    var insEndDelay = insDuration - instance.endDelay;\n    var insTime = adjustTime(engineTime);\n    instance.progress = minMax((insTime / insDuration) * 100, 0, 100);\n    instance.reversePlayback = insTime < instance.currentTime;\n    if (children) { syncInstanceChildren(insTime); }\n    if (!instance.began && instance.currentTime > 0) {\n      instance.began = true;\n      setCallback('begin');\n    }\n    if (!instance.loopBegan && instance.currentTime > 0) {\n      instance.loopBegan = true;\n      setCallback('loopBegin');\n    }\n    if (insTime <= insDelay && instance.currentTime !== 0) {\n      setAnimationsProgress(0);\n    }\n    if ((insTime >= insEndDelay && instance.currentTime !== insDuration) || !insDuration) {\n      setAnimationsProgress(insDuration);\n    }\n    if (insTime > insDelay && insTime < insEndDelay) {\n      if (!instance.changeBegan) {\n        instance.changeBegan = true;\n        instance.changeCompleted = false;\n        setCallback('changeBegin');\n      }\n      setCallback('change');\n      setAnimationsProgress(insTime);\n    } else {\n      if (instance.changeBegan) {\n        instance.changeCompleted = true;\n        instance.changeBegan = false;\n        setCallback('changeComplete');\n      }\n    }\n    instance.currentTime = minMax(insTime, 0, insDuration);\n    if (instance.began) { setCallback('update'); }\n    if (engineTime >= insDuration) {\n      lastTime = 0;\n      countIteration();\n      if (!instance.remaining) {\n        instance.paused = true;\n        if (!instance.completed) {\n          instance.completed = true;\n          setCallback('loopComplete');\n          setCallback('complete');\n          if (!instance.passThrough && 'Promise' in window) {\n            resolve();\n            promise = makePromise(instance);\n          }\n        }\n      } else {\n        startTime = now;\n        setCallback('loopComplete');\n        instance.loopBegan = false;\n        if (instance.direction === 'alternate') {\n          toggleInstanceDirection();\n        }\n      }\n    }\n  }\n\n  instance.reset = function() {\n    var direction = instance.direction;\n    instance.passThrough = false;\n    instance.currentTime = 0;\n    instance.progress = 0;\n    instance.paused = true;\n    instance.began = false;\n    instance.loopBegan = false;\n    instance.changeBegan = false;\n    instance.completed = false;\n    instance.changeCompleted = false;\n    instance.reversePlayback = false;\n    instance.reversed = direction === 'reverse';\n    instance.remaining = instance.loop;\n    children = instance.children;\n    childrenLength = children.length;\n    for (var i = childrenLength; i--;) { instance.children[i].reset(); }\n    if (instance.reversed && instance.loop !== true || (direction === 'alternate' && instance.loop === 1)) { instance.remaining++; }\n    setAnimationsProgress(instance.reversed ? instance.duration : 0);\n  };\n\n  // Set Value helper\n\n  instance.set = function(targets, properties) {\n    setTargetsValue(targets, properties);\n    return instance;\n  };\n\n  instance.tick = function(t) {\n    now = t;\n    if (!startTime) { startTime = now; }\n    setInstanceProgress((now + (lastTime - startTime)) * anime.speed);\n  };\n\n  instance.seek = function(time) {\n    setInstanceProgress(adjustTime(time));\n  };\n\n  instance.pause = function() {\n    instance.paused = true;\n    resetTime();\n  };\n\n  instance.play = function() {\n    if (!instance.paused) { return; }\n    if (instance.completed) { instance.reset(); }\n    instance.paused = false;\n    activeInstances.push(instance);\n    resetTime();\n    if (!raf) { engine(); }\n  };\n\n  instance.reverse = function() {\n    toggleInstanceDirection();\n    resetTime();\n  };\n\n  instance.restart = function() {\n    instance.reset();\n    instance.play();\n  };\n\n  instance.reset();\n\n  if (instance.autoplay) { instance.play(); }\n\n  return instance;\n\n}\n\n// Remove targets from animation\n\nfunction removeTargetsFromAnimations(targetsArray, animations) {\n  for (var a = animations.length; a--;) {\n    if (arrayContains(targetsArray, animations[a].animatable.target)) {\n      animations.splice(a, 1);\n    }\n  }\n}\n\nfunction removeTargets(targets) {\n  var targetsArray = parseTargets(targets);\n  for (var i = activeInstances.length; i--;) {\n    var instance = activeInstances[i];\n    var animations = instance.animations;\n    var children = instance.children;\n    removeTargetsFromAnimations(targetsArray, animations);\n    for (var c = children.length; c--;) {\n      var child = children[c];\n      var childAnimations = child.animations;\n      removeTargetsFromAnimations(targetsArray, childAnimations);\n      if (!childAnimations.length && !child.children.length) { children.splice(c, 1); }\n    }\n    if (!animations.length && !children.length) { instance.pause(); }\n  }\n}\n\n// Stagger helpers\n\nfunction stagger(val, params) {\n  if ( params === void 0 ) params = {};\n\n  var direction = params.direction || 'normal';\n  var easing = params.easing ? parseEasings(params.easing) : null;\n  var grid = params.grid;\n  var axis = params.axis;\n  var fromIndex = params.from || 0;\n  var fromFirst = fromIndex === 'first';\n  var fromCenter = fromIndex === 'center';\n  var fromLast = fromIndex === 'last';\n  var isRange = is.arr(val);\n  var val1 = isRange ? parseFloat(val[0]) : parseFloat(val);\n  var val2 = isRange ? parseFloat(val[1]) : 0;\n  var unit = getUnit(isRange ? val[1] : val) || 0;\n  var start = params.start || 0 + (isRange ? val1 : 0);\n  var values = [];\n  var maxValue = 0;\n  return function (el, i, t) {\n    if (fromFirst) { fromIndex = 0; }\n    if (fromCenter) { fromIndex = (t - 1) / 2; }\n    if (fromLast) { fromIndex = t - 1; }\n    if (!values.length) {\n      for (var index = 0; index < t; index++) {\n        if (!grid) {\n          values.push(Math.abs(fromIndex - index));\n        } else {\n          var fromX = !fromCenter ? fromIndex%grid[0] : (grid[0]-1)/2;\n          var fromY = !fromCenter ? Math.floor(fromIndex/grid[0]) : (grid[1]-1)/2;\n          var toX = index%grid[0];\n          var toY = Math.floor(index/grid[0]);\n          var distanceX = fromX - toX;\n          var distanceY = fromY - toY;\n          var value = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\n          if (axis === 'x') { value = -distanceX; }\n          if (axis === 'y') { value = -distanceY; }\n          values.push(value);\n        }\n        maxValue = Math.max.apply(Math, values);\n      }\n      if (easing) { values = values.map(function (val) { return easing(val / maxValue) * maxValue; }); }\n      if (direction === 'reverse') { values = values.map(function (val) { return axis ? (val < 0) ? val * -1 : -val : Math.abs(maxValue - val); }); }\n    }\n    var spacing = isRange ? (val2 - val1) / maxValue : val1;\n    return start + (spacing * (Math.round(values[i] * 100) / 100)) + unit;\n  }\n}\n\n// Timeline\n\nfunction timeline(params) {\n  if ( params === void 0 ) params = {};\n\n  var tl = anime(params);\n  tl.duration = 0;\n  tl.add = function(instanceParams, timelineOffset) {\n    var tlIndex = activeInstances.indexOf(tl);\n    var children = tl.children;\n    if (tlIndex > -1) { activeInstances.splice(tlIndex, 1); }\n    function passThrough(ins) { ins.passThrough = true; }\n    for (var i = 0; i < children.length; i++) { passThrough(children[i]); }\n    var insParams = mergeObjects(instanceParams, replaceObjectProps(defaultTweenSettings, params));\n    insParams.targets = insParams.targets || params.targets;\n    var tlDuration = tl.duration;\n    insParams.autoplay = false;\n    insParams.direction = tl.direction;\n    insParams.timelineOffset = is.und(timelineOffset) ? tlDuration : getRelativeValue(timelineOffset, tlDuration);\n    passThrough(tl);\n    tl.seek(insParams.timelineOffset);\n    var ins = anime(insParams);\n    passThrough(ins);\n    children.push(ins);\n    var timings = getInstanceTimings(children, params);\n    tl.delay = timings.delay;\n    tl.endDelay = timings.endDelay;\n    tl.duration = timings.duration;\n    tl.seek(0);\n    tl.reset();\n    if (tl.autoplay) { tl.play(); }\n    return tl;\n  };\n  return tl;\n}\n\nanime.version = '3.1.0';\nanime.speed = 1;\nanime.running = activeInstances;\nanime.remove = removeTargets;\nanime.get = getOriginalTargetValue;\nanime.set = setTargetsValue;\nanime.convertPx = convertPxToUnit;\nanime.path = getPath;\nanime.setDashoffset = setDashoffset;\nanime.stagger = stagger;\nanime.timeline = timeline;\nanime.easing = parseEasings;\nanime.penner = penner;\nanime.random = function (min, max) { return Math.floor(Math.random() * (max - min + 1)) + min; };\n\nmodule.exports = anime;\n","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n","if (window.NodeList && !NodeList.prototype.forEach) {\r\n    NodeList.prototype.forEach = function (callback, thisArg) {\r\n        thisArg = thisArg || window;\r\n        for (var i = 0; i < this.length; i++) {\r\n            callback.call(thisArg, this[i], i, this);\r\n        }\r\n    };\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}